<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <groupId>org.carlspring</groupId>
    <artifactId>my-testing-artifact</artifactId>
    <version>1.1.26-PR-3-SNAPSHOT</version>
    <packaging>jar</packaging>

    <name>my-testing-artifact</name>
    <url>http://maven.apache.org</url>

    <properties>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        <gpg.keyid/>
        <gpg.passfile/>
    </properties>

    <scm>
        <connection>scm:git:git@github.com:steve-todorov/ideal-chainsaw.git</connection>
        <url>scm:git:git@github.com:steve-todorov/ideal-chainsaw.git</url>
        <developerConnection>scm:git:git@github.com:steve-todorov/ideal-chainsaw.git</developerConnection>
        <tag>HEAD</tag>
    </scm>

    <dependencies>
        <dependency>
            <groupId>junit</groupId>
            <artifactId>junit</artifactId>
            <version>3.8.1</version>
            <scope>test</scope>
        </dependency>
    </dependencies>

    <distributionManagement>
        <repository>
            <id>sonatype-staging</id>
            <url>https://oss.sonatype.org/service/local/staging/deploy/maven2</url>
        </repository>
        <snapshotRepository>
            <id>sonatype-snapshots</id>
            <url>https://oss.sonatype.org/content/repositories/snapshots</url>
        </snapshotRepository>
    </distributionManagement>

    <build>
        <plugins>
            <plugin>
                <groupId>com.amashchenko.maven.plugin</groupId>
                <artifactId>gitflow-maven-plugin</artifactId>
                <version>1.11.0</version>
                <configuration>
                    <gitFlowConfig>
                        <developmentBranch>master</developmentBranch>
                    </gitFlowConfig>
                    <commitMessages>
                        <releaseStartMessage>[release] Releasing @{version}</releaseStartMessage>
                        <releaseVersionUpdateMessage>[release] Update for next development version
                        </releaseVersionUpdateMessage>
                        <tagReleaseMessage>[release] Tag release</tagReleaseMessage>
                        <releaseFinishMergeMessage>[release] Merge branch 'release/@{version}'</releaseFinishMergeMessage>
                        <!--
                            The release finish message specifically does not have a [release], so that Jenkins
                            will build the new development version.
                          -->
                        <releaseFinishMessage>Update for next development version</releaseFinishMessage>
                    </commitMessages>
                </configuration>
            </plugin>
        </plugins>
    </build>


    <profiles>
        <profile>
            <id>sign-artifacts</id>
            <activation>
                <activeByDefault>false</activeByDefault>
            </activation>
            <build>
                <plugins>
                    <plugin>
                        <groupId>org.apache.maven.plugins</groupId>
                        <artifactId>maven-gpg-plugin</artifactId>
                        <version>1.6</version>
                        <executions>
                            <execution>
                                <id>sign-artifacts</id>
                                <phase>verify</phase>
                                <goals>
                                    <goal>sign</goal>
                                </goals>
                                <configuration>
                                    <keyname>${gpg.keyid}</keyname>
                                    <!-- your server id must match the gpg.keyid -->
                                    <!-- This does not work because Jenkins does not have a way to provide a serverId
                                         which only has `passphrase`. You can only use user/password serverId -->
                                    <!-- <passphraseServerId>${gpg.keyid}</passphraseServerId> -->
                                    <gpgArguments>
                                        <arg>--pinentry-mode</arg>
                                        <arg>loopback</arg>
                                        <arg>--passphrase-file</arg>
                                        <arg>${gpg.passfile}</arg>
                                    </gpgArguments>
                                </configuration>
                            </execution>
                        </executions>
                    </plugin>
                </plugins>
            </build>
        </profile>
    </profiles>
</project>
